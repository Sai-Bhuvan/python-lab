import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

# Load the data from a CSV or Excel file
file_path = 'iris.csv'  # Replace 'your_data.csv' with your file path
data = pd.read_csv(file_path)  # For Excel, use pd.read_excel()

# Extract x and y values from the dataset
x_values = data['SepalLengthCm'].values.reshape(-1, 1)  # Reshape for sklearn
y_values = data['SepalWidthCm']

# i. Scatter plot
plt.scatter(x_values, y_values)
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Scatter Plot')
plt.show()

# ii. Calculate mean (average)
x_mean = x_values.mean()
y_mean = y_values.mean()
print(f"Mean of X: {x_mean}")
print(f"Mean of Y: {y_mean}")

# iii. Calculate median
x_median = x_values.median()
y_median = y_values.median()
print(f"Median of X: {x_median}")
print(f"Median of Y: {y_median}")

# iv. Calculate standard deviation
x_std_dev = x_values.std()
y_std_dev = y_values.std()
print(f"Standard Deviation of X: {x_std_dev}")
print(f"Standard Deviation of Y: {y_std_dev}")

# v. Calculate variance
x_variance = x_values.var()
y_variance = y_values.var()
print(f"Variance of X: {x_variance}")
print(f"Variance of Y: {y_variance}")

# vi. Calculate slope using Linear Regression from sklearn
regression = LinearRegression()
regression.fit(x_values, y_values)
slope = regression.coef_[0]
intercept = regression.intercept_
print(f"Slope: {slope}")

# vii. Draw regression line
plt.scatter(x_values, y_values)
plt.plot(x_values, regression.predict(x_values), color='red')  # Regression line
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Scatter Plot with Regression Line')
plt.show()





# by typing the dataset
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Manually input the dataset
data_dict = {
    'Hindi': [65, 94, 7, 88, 39, 51, 73],
    'English': [10, 56, 85, 46, 81, 43, 48],
    'Science': [59, 4, 76, 59, 37, 14, 6],
    'Maths': [3, 67, 99, 94, 38, 53, 38],
    'History': [71, 91, 60, 52, 6, 64, 50],
    'Geography': [37, 50, 25, 38, 54, 59, 21],
    'Total': [245, 362, 352, 377, 255, 284, 236],
    'Results': [0, 1, 0, 1, 1, 1, 0],
    'Div': [3, 1, 2, 1, 3, 2, 3]
}

# Create a DataFrame
data = pd.DataFrame(data_dict)

# Count the number of pass and fail for each subject
pass_fail_count = {}
subjects = ['Hindi', 'English', 'Science', 'Maths', 'History', 'Geography']

for subject in subjects:
    pass_count = len(data[data[subject] >= 40])
    fail_count = len(data[data[subject] < 40])
    pass_fail_count[subject] = {'Pass': pass_count, 'Fail': fail_count}

# Analyze overall result
overall_pass_count = len(data[data['Results'] == 1])
overall_fail_count = len(data[data['Results'] == 0])

# Visualize output
# Bar chart for pass/fail count in each subject
pass_fail_df = pd.DataFrame(pass_fail_count)
pass_fail_df.plot(kind='bar', stacked=True)
plt.title('Pass/Fail Count in Each Subject')
plt.xlabel('Subjects')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Pie chart for overall pass/fail count
plt.figure(figsize=(8, 6))
plt.pie([overall_pass_count, overall_fail_count], labels=['Pass', 'Fail'], autopct='%1.1f%%', startangle=140)
plt.title('Overall Pass/Fail Percentage')
plt.axis('equal')
plt.show()
